import requests
from datetime import datetime
import time
import sys

class LiveNyamiraMonitor:
    def __init__(self):
        # API Configuration
        self.API_URL = "https://api.energy.kenya.gov/live/nyamira"  # Replace with real endpoint
        self.thresholds = {'warning': 50000, 'critical': 70000}

    def get_current_timestamp(self):
        """Return formatted current time with microseconds"""
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]  # Truncate to milliseconds

    def create_percentage_bar(self, percentage):
        """Create percentage bar visualization"""
        bar_length = 20
        filled = int(round(bar_length * percentage))
        return 'â–ˆ' * filled + ' ' * (bar_length - filled)

    def fetch_data(self):
        """Fetch data with simulated fallback"""
        try:
            response = requests.get(self.API_URL, timeout=5)
            data = response.json()
            return {
                'timestamp': self.get_current_timestamp(),
                'consumption': float(data['consumption_kwh']),
                'renewable': float(data['renewable_pct'])/100
            }
        except:
            # Realistic simulation fallback
            current_time = datetime.now()
            time_factor = (current_time.hour - 12)/12  # Peak at noon
            minute_effect = current_time.minute/60 * 0.1  # Small variation by minute
            return {
                'timestamp': self.get_current_timestamp(),
                'consumption': 37500 + (12500 * time_factor) + (minute_effect * 10000),
                'renewable': 0.375 + (0.125 * (1 - abs(time_factor))) + minute_effect
            }

    def display(self, data):
        """Update console display"""
        sys.stdout.write("\033[H\033[J")  # Clear console

        print(f"=== NYAMERI NYAMIRA COUNTY LIVE ENERGY MONITOR ===")
        print(f"Last Update: {data['timestamp']}\n")
        print(f"Current Consumption: {data['consumption']:,.2f} kWh")

        # Percentage bar display
        print("\nRenewable Energy:")
        percentage_bar = self.create_percentage_bar(data['renewable'])
        print(f"[{percentage_bar}] {data['renewable']:.1%}")

        # Status indicator
        if data['consumption'] > self.thresholds['critical']:
            status = "ðŸ”´ CRITICAL"
        elif data['consumption'] > self.thresholds['warning']:
            status = "ðŸŸ¡ WARNING"
        else:
            status = "ðŸŸ¢ NORMAL"

        print(f"\nStatus: {status}")
        print(f"Thresholds - Warning: {self.thresholds['warning']:,} kWh | Critical: {self.thresholds['critical']:,} kWh")
        print("\nPress Ctrl+C to exit")

    def run(self):
        """Main monitoring loop"""
        print("Starting Nyameri Nyamira Energy Monitor...")
        time.sleep(2)

        try:
            while True:
                current_data = self.fetch_data()
                self.display(current_data)
                time.sleep(0.1)  # Update every 100ms for smooth microseconds display
        except KeyboardInterrupt:
            print("\nMonitoring stopped")

if __name__ == "__main__":
    monitor = LiveNyamiraMonitor()
    monitor.run()
